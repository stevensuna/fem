@use "../abstracts/variables" as v;
@use "../abstracts/mixins" as m;
@use "sass:map";

.card {
  background-color: v.$color-white;
  border-radius: var(--card-border-radius);
  overflow: visible; // Changed from hidden to visible to prevent popup clipping
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: column;
  max-width: var(--card-max-width);
  width: 100%;
  position: relative; // Added to ensure proper stacking context

  @include m.respond-to(tablet) {
    flex-direction: row;
  }

  &__image {
    flex-shrink: 0;
    margin: 0;
    height: 200px;
    overflow: hidden;

    @include m.respond-to(tablet) {
      width: 40%;
      height: auto;
    }

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
    }
  }

  &__content {
    padding: v.$spacing-500;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow: visible; // Ensure content doesn't clip the popup

    @include m.respond-to(tablet) {
      padding: v.$spacing-800;
    }

    @include m.respond-to(desktop) {
      padding: v.$spacing-400;
    }
  }

  &__footer {
    margin-top: auto;
    display: flex;
    align-items: center;
    position: relative; // Reinforcing relative positioning
    overflow: visible; // Ensure footer doesn't clip the popup
  }
}

.avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: v.$spacing-200;
}

.user-info {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  gap: 0.25rem; // Using direct value instead of map.get

  @include m.respond-to(tablet) {
    gap: 0.5rem; // Using direct value instead of map.get
  }
}

.share-button {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: v.$color-grey-200;
  @include m.flex(row, center, center);
  transition: background-color var(--transition-default);
  position: relative;
  z-index: 2;

  &:hover,
  &:focus {
    background-color: v.$color-grey-400;

    img {
      filter: brightness(5);
    }
  }

  &:focus-visible {
    outline: 2px solid v.$color-grey-900; // Fixed - using v. namespace
    outline-offset: 2px;
  }

  &.active {
    background-color: v.$color-grey-500;
    display: flex;
    align-items: center;
    justify-content: center;

    img {
      filter: brightness(5);
      position: relative; // Ensure proper positioning
      margin: 0; // Remove any margin that might affect centering
      top: 0; // Reset any top positioning
      left: 0; // Reset any left positioning
    }
  }

  img {
    width: 15px;
    height: 13px;
    transition: filter var(--transition-default);
  }
}
