@use 'sass:math';
@use 'sass:map';
@use 'variables' as v;

// Media query mixins for breakpoints
@mixin break-up($breakpoint) {
  @if map.has-key(v.$breakpoints, $breakpoint) {
    @media screen and (min-width: map.get(v.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error 'Invalid breakpoint: #{$breakpoint}. Available breakpoints are: #{map.keys(v.$breakpoints)}';
  }
}

// Legacy media query mixins for responsive design
@mixin respond-to($breakpoint) {
  @if $breakpoint == tablet {
    @media (min-width: v.$breakpoint-tablet) {
      @content;
    }
  } @else if $breakpoint == desktop {
    @media (min-width: v.$breakpoint-desktop) {
      @content;
    }
  }
}

// Fluid typography using clamp for better browser support
@mixin fluid-type($min-font-size, $max-font-size, $min-vw: 20rem, $max-vw: 75rem) {
  font-size: clamp(
    #{$min-font-size},
    calc(#{$min-font-size} + #{math.div($max-font-size - $min-font-size, $max-vw - $min-vw)} * (100vw - #{$min-vw})),
    #{$max-font-size}
  );
}

// Typography mixins
@mixin heading-1 {
  font-size: $font-size-lg;
  line-height: $line-height-lg;
  letter-spacing: $letter-spacing-lg;
  font-weight: $font-weight-bold;
}

@mixin body-text {
  font-size: $font-size-base;
  line-height: $line-height-base;
  letter-spacing: $letter-spacing-sm;
  font-weight: $font-weight-medium;
}

// Flexbox utilities
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Hide element visually but keep it accessible for screen readers
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Focus styles
@mixin focus-ring {
  outline: 2px solid v.$color-grey-900;
  outline-offset: 2px;
}